var docs = [
  { name: '+',
    type: '(+) :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: '-',
    type: '(-) :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: '*',
    type: '(*) :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: '^',
    type: '(^) :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: '/',
    type: '(/) :: Float -> Float -> Float',
    module: 'Prelude',
  },
  { name: 'div',
    type: 'div :: Int -> Int -> Int',
    module: 'Prelude',
  },
  { name: 'rem',
    type: 'rem :: Int -> Int -> Int',
    module: 'Prelude',
  },
  { name: 'mod',
    type: 'mod :: Int -> Int -> Int',
    module: 'Prelude',
  },
  { name: 'sin',
    type: 'sin, cos, tan, asin, acos, atan :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'cos',
    type: 'sin, cos, tan, asin, acos, atan :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'tan',
    type: 'sin, cos, tan, asin, acos, atan :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'asin',
    type: 'sin, cos, tan, asin, acos, atan :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'acos',
    type: 'sin, cos, tan, asin, acos, atan :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'atan',
    type: 'sin, cos, tan, asin, acos, atan :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'atan2',
    type: 'atan2 :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: 'sqrt',
    type: 'sqrt :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'abs',
    type: 'abs :: Number -> Number',
    module: 'Prelude',
  },
  { name: 'logBase',
    type: 'logBase :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: 'min',
    type: 'min, max :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: 'max',
    type: 'min, max :: Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: 'clamp',
    type: 'clamp :: Number -> Number -> Number -> Number',
    module: 'Prelude',
  },
  { name: 'pi',
    type: 'pi :: Float',
    module: 'Prelude',
  },
  { name: 'e',
    type: 'e :: Float',
    module: 'Prelude',
  },
  { name: 'round',
    type: 'round :: Float -> Int',
    module: 'Prelude',
  },
  { name: 'truncate',
    type: 'truncate :: Float -> Int',
    module: 'Prelude',
  },
  { name: 'floor',
    type: 'floor :: Float -> Int',
    module: 'Prelude',
  },
  { name: 'ceiling',
    type: 'ceiling :: Float -> Int',
    module: 'Prelude',
  },
  { name: 'toFloat',
    type: 'toFloat :: Int -> Float',
    module: 'Prelude',
  },
  { name: 'show',
    type: 'show :: a -> String',
    module: 'Prelude',
  },
  { name: 'readInt',
    type: 'readInt :: String -> Maybe Int',
    module: 'Prelude',
  },
  { name: 'readFloat',
    type: 'readFloat :: String -> Maybe Float',
    module: 'Prelude',
  },
  { name: '.',
    type: '(.) :: (b -> c) -> (a -> b) -> (a -> c)',
    module: 'Prelude',
  },
  { name: '$',
    type: '($) :: (a -> b) -> a -> b',
    module: 'Prelude',
  },
  { name: 'id',
    type: 'id :: a -> a',
    module: 'Prelude',
  },
  { name: 'fst',
    type: 'fst :: (a,b) -> a',
    module: 'Prelude',
  },
  { name: 'snd',
    type: 'snd :: (a,b) -> b',
    module: 'Prelude',
  },
  { name: 'flip',
    type: 'flip :: (a -> b -> c) -> (b -> a -> c)',
    module: 'Prelude',
  },
  { name: 'curry',
    type: 'curry :: ((a,b) -> c) -> a -> b -> c',
    module: 'Prelude',
  },
  { name: 'uncurry',
    type: 'uncurry :: (a -> b -> c) -> (a,b) -> c',
    module: 'Prelude',
  },
  {
    name: '==',
    type: '(==) :: a -> a -> Bool',
    module: 'Prelude',
  },
  {
    name: '/=',
    type: '(/=) :: a -> a -> Bool',
    module: 'Prelude',
  },
  {
    name: '<',
    type: '(<) :: a -> a -> Bool',
    module: 'Prelude',
  },
  {
    name: '>',
    type: '(>) :: a -> a -> Bool',
    module: 'Prelude',
  },
  {
    name: '<=',
    type: '(<=) :: a -> a -> Bool',
    module: 'Prelude',
  },
  {
    name: '>=',
    type: '(>=) :: a -> a -> Bool',
    module: 'Prelude',
  },
  {
    name: '&&',
    type: '(&&) :: Bool -> Bool -> Bool',
    module: 'Prelude',
  },
  {
    name: '||',
    type: '(||) :: Bool -> Bool -> Bool',
    module: 'Prelude',
  },
  {
    name: 'xor',
    type: 'xor :: Bool -> Bool -> Bool',
    module: 'Prelude',
  },
  {
    name: 'not',
    type: 'not :: Bool -> Bool',
    module: 'Prelude',
  },
  { name: 'otherwise',
    type: 'otherwise :: Bool',
    module: 'Prelude',
  },
  { name: 'isUpper',
    type: 'isUpper :: Char -> Bool',
    module: 'Char',
  },
  { name: 'isLower',
    type: 'isLower :: Char -> Bool',
    module: 'Char',
  },
  { name: 'isDigit',
    type: 'isDigit :: Char -> Bool',
    module: 'Char',
  },
  { name: 'isOctDigit',
    type: 'isOctDigit :: Char -> Bool',
    module: 'Char',
  },
  { name: 'isHexDigit',
    type: 'isHexDigit :: Char -> Bool',
    module: 'Char',
  },
  { name: 'toUpper',
    type: 'toUpper :: Char -> Char',
    module: 'Char',
  },
  { name: 'toLower',
    type: 'toLower :: Char -> Char',
    module: 'Char',
  },
  { name: 'toLocaleUpper',
    type: 'toLocaleUpper :: Char -> Char',
    module: 'Char',
  },
  { name: 'toLocaleLower',
    type: 'toLocaleLower :: Char -> Char',
    module: 'Char',
  },
  { name: 'toCode',
    type: 'toCode :: Char -> Int',
    module: 'Char',
  },
  { name: 'fromCode',
    type: 'fromCode :: Int -> Char',
    module: 'Char',
  },
  { name: 'empty',
    type: 'empty :: Dict k v',
    module: 'Dict',
  },
  { name: 'singleton',
    type: 'singleton :: k -> v -> Dict k v',
    module: 'Dict',
  },
  { name: 'insert',
    type: 'insert :: k -> v -> Dict k v -> Dict k v',
    module: 'Dict',
  },
  { name: 'remove',
    type: 'remove :: k -> Dict k v -> Dict k v',
    module: 'Dict',
  },
  { name: 'member',
    type: 'member :: k -> Dict k v -> Bool',
    module: 'Dict',
  },
  { name: 'lookup',
    type: 'lookup :: k -> Dict k v -> Maybe v',
    module: 'Dict',
  },
  { name: 'findWithDefault',
    type: 'findWithDefault :: v -> k -> Dict k v -> v',
    module: 'Dict',
  },
  { name: 'find',
    type: 'find :: k -> Dict k v -> v',
    module: 'Dict',
  },
  { name: 'union',
    type: 'union :: Dict k v -> Dict k v -> Dict k v',
    module: 'Dict',
  },
  { name: 'intersect',
    type: 'intersect :: Dict k v -> Dict k w -> Dict k v',
    module: 'Dict',
  },
  { name: 'diff',
    type: 'diff :: Dict k v -> Dict k w -> Dict k v',
    module: 'Dict',
  },
  { name: 'map',
    type: 'map :: (a -> b) -> Dict k a -> Dict k b',
    module: 'Dict',
  },
  { name: 'foldl',
    type: 'foldl :: (k -> v -> b -> b) -> b -> Dict k v -> b',
    module: 'Dict',
  },
  { name: 'foldr',
    type: 'foldr :: (k -> v -> b -> b) -> b -> Dict k v -> b',
    module: 'Dict',
  },
  { name: 'keys',
    type: 'keys :: Dict k v -> [k]',
    module: 'Dict',
  },
  { name: 'values',
    type: 'values :: Dict k v -> [v]',
    module: 'Dict',
  },
  { name: 'toList',
    type: 'toList :: Dict k v -> [(k,v)]',
    module: 'Dict',
  },
  { name: 'fromList',
    type: 'fromList :: [(k,v)] -> Dict k v',
    module: 'Dict',
  },
  { name: ':',
    type: '(:) :: a -> [a] -> [a]',
    module: 'List',
  },
  { name: '++',
    type: '(++) :: [a] -> [a] -> [a]',
    module: 'List',
  },
  { name: 'head',
    type: 'head :: [a] -> a',
    module: 'List',
  },
  { name: 'tail',
    type: 'tail :: [a] -> [a]',
    module: 'List',
  },
  { name: 'last',
    type: 'last :: [a] -> a',
    module: 'List',
  },
  { name: 'length',
    type: 'length :: [a] -> Int',
    module: 'List',
  },
  { name: 'map',
    type: 'map :: (a -> b) -> [a] -> [b]',
    module: 'List',
  },
  { name: 'reverse',
    type: 'reverse :: [a] -> [a]',
    module: 'List',
  },
  { name: 'intersperse',
    type: 'intersperse :: a -> [a] -> [a]',
    module: 'List',
  },
  { name: 'intercalate',
    type: 'intercalate :: [a] -> [[a]] -> [a]',
    module: 'List',
  },
  { name: 'foldr',
    type: 'foldr :: (a -> b -> b) -> b -> [a] -> b',
    module: 'List',
  },
  { name: 'foldl',
    type: 'foldl :: (a -> b -> b) -> b -> [a] -> b',
    module: 'List',
  },
  { name: 'foldr1',
    type: 'foldr1 :: (a -> a -> a) -> [a] -> a',
    module: 'List',
  },
  { name: 'foldl1',
    type: 'foldl1 :: (a -> a -> a) -> [a] -> a',
    module: 'List',
  },
  { name: 'scanl',
    type: 'scanl :: (a -> b -> b) -> b -> [a] -> [b]',
    module: 'List',
  },
  { name: 'scanl1',
    type: 'scanl1 :: (a -> a -> a) -> [a] -> [a]',
    module: 'List',
  },
  { name: 'concat',
    type: 'concat :: [[a]] -> [a]',
    module: 'List',
  },
  { name: 'concatMap',
    type: 'concatMap :: (a -> [b]) -> [a] -> [b]',
    module: 'List',
  },
  { name: 'and',
    type: 'and :: [Bool] -> Bool',
    module: 'List',
  },
  { name: 'or',
    type: 'or :: [Bool] -> Bool',
    module: 'List',
  },
  { name: 'all',
    type: 'all :: (a -> Bool) -> [a] -> Bool',
    module: 'List',
  },
  { name: 'any',
    type: 'any :: (a -> Bool) -> [a] -> Bool',
    module: 'List',
  },
  { name: 'sum',
    type: 'sum :: [Int] -> Int',
    module: 'List',
  },
  { name: 'product',
    type: 'product :: [Int] -> Int',
    module: 'List',
  },
  { name: 'maximum',
    type: 'maximum :: [Int] -> Int',
    module: 'List',
  },
  { name: 'minimum',
    type: 'minimum :: [Int] -> Int',
    module: 'List',
  },
  { name: 'filter',
    type: 'filter :: (a -> Bool) -> [a] -> [a]',
    module: 'List',
  },
  { name: 'sort',
    type: 'sort :: [Number] -> [Number]',
    module: 'List',
  },
  { name: 'partition',
    type: 'partition :: (a -> Bool) -> [a] -> ([a],[a])',
    module: 'List',
  },
  { name: 'zip',
    type: 'zip :: [a] -> [b] -> [(a,b)]',
    module: 'List',
  },
  { name: 'zipWith',
    type: 'zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]',
    module: 'List',
  },
  { name: 'take',
    type: 'take :: Int -> [a] -> [a]',
    module: 'List',
  },
  { name: 'drop',
    type: 'drop :: Int -> [a] -> [a]',
    module: 'List',
  },
  { name: 'Maybe',
    type: 'data Maybe a = Just a | Nothing',
    module: 'Maybe',
  },
  { name: 'Just',
    type: 'data Maybe a = Just a | Nothing',
    module: 'Maybe',
  },
  { name: 'Nothing',
    type: 'data Maybe a = Just a | Nothing',
    module: 'Maybe',
  },
  { name: 'maybe',
    type: 'maybe :: b -> (a -> b) -> Maybe a -> b',
    module: 'Maybe',
  },
  { name: 'isJust',
    type: 'isJust :: Maybe a -> Bool',
    module: 'Maybe',
  },
  { name: 'isNothing',
    type: 'isNothing :: Maybe a -> Bool',
    module: 'Maybe',
  },
  { name: 'cons',
    type: 'cons :: Maybe a -> [a] -> [a]',
    module: 'Maybe',
  },
  { name: 'justs',
    type: 'justs :: [Maybe a] -> [a]',
    module: 'Maybe',
  },
  { name: 'empty',
    type: 'empty :: Set a',
    module: 'Set',
  },
  { name: 'singleton',
    type: 'singleton :: a -> Set a',
    module: 'Set',
  },
  { name: 'insert',
    type: 'insert :: a -> Set a -> Set a',
    module: 'Set',
  },
  { name: 'remove',
    type: 'remove :: a -> Set a -> Set a',
    module: 'Set',
  },
  { name: 'member',
    type: 'member :: a -> Set a -> Bool',
    module: 'Set',
  },
  { name: 'union',
    type: 'union :: Set a -> Set a -> Set a',
    module: 'Set',
  },
  { name: 'intersect',
    type: 'intersect :: Set a -> Set a -> Set a',
    module: 'Set',
  },
  { name: 'diff',
    type: 'diff :: Set a -> Set a -> Set a',
    module: 'Set',
  },
  { name: 'map',
    type: 'map :: (a -> b) -> Set a -> Set b',
    module: 'Set',
  },
  { name: 'foldl',
    type: 'foldl :: (a -> b -> b) -> b -> Set a -> b',
    module: 'Set',
  },
  { name: 'foldr',
    type: 'foldr :: (a -> b -> b) -> b -> Set a -> b',
    module: 'Set',
  },
  { name: 'toList',
    type: 'toList :: Set a -> [a]',
    module: 'Set',
  },
  { name: 'fromList',
    type: 'fromList :: [a] -> Set a',
    module: 'Set',
  },
  { name: 'rgb',
    type: 'rgb :: Int -> Int -> Int -> Color',
    module: 'Color',
  },
  { name: 'rgba',
    type: 'rgba :: Int -> Int -> Int -> Float -> Color',
    module: 'Color',
  },
  { name: 'complement',
    type: 'complement :: Color -> Color',
    module: 'Color',
  },
  { name: 'hsv',
    type: 'hsv :: Int -> Float -> Float -> Color',
    module: 'Color',
  },
  { name: 'hsva',
    type: 'hsva :: Int -> Float -> Float -> Float -> Color',
    module: 'Color',
  },
  { name: 'red',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'green',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'blue',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'cyan',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'yellow',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'magenta',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'black',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'white',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'grey',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'gray',
    type: 'red, green, blue, cyan, yellow, magenta, black, white, grey, gray :: Color',
    module: 'Color',
  },
  { name: 'plainText',
    type: 'plainText :: String -> Element',
    module: 'Graphics',
  },
  { name: 'text',
    type: 'text :: Text -> Element',
    module: 'Graphics',
  },
  { name: 'asText',
    type: 'asText :: a -> Text',
    module: 'Graphics',
  },
  { name: 'centeredText',
    type: 'centeredText :: Text -> Element',
    module: 'Graphics',
  },
  { name: 'rightedText',
    type: 'rightedText :: Text -> Element',
    module: 'Graphics',
  },
  { name: 'justifiedText',
    type: 'justifiedText :: Text -> Element',
    module: 'Graphics',
  },
  { name: 'image',
    type: 'image :: Int -> Int -> String -> Element',
    module: 'Graphics',
  },
  { name: 'fittedImage',
    type: 'fittedImage :: Int -> Int -> String -> Element',
    module: 'Graphics',
  },
  { name: 'images',
    type: 'images :: Signal String -> Signal Element',
    module: 'Graphics',
  },
  { name: 'video',
    type: 'video :: Int -> Int -> String -> Element',
    module: 'Graphics',
  },
  { name: 'collage',
    type: 'collage :: Int -> Int -> [Form] -> Element',
    module: 'Graphics',
  },
  { name: 'flow',
    type: 'flow :: Direction -> [Element] -> Element',
    module: 'Graphics',
  },
  { name: 'up',
    type: 'up, down, left, right, inward, outward :: Direction',
    module: 'Graphics',
  },
  { name: 'down',
    type: 'up, down, left, right, inward, outward :: Direction',
    module: 'Graphics',
  },
  { name: 'left',
    type: 'up, down, left, right, inward, outward :: Direction',
    module: 'Graphics',
  },
  { name: 'right',
    type: 'up, down, left, right, inward, outward :: Direction',
    module: 'Graphics',
  },
  { name: 'inward',
    type: 'up, down, left, right, inward, outward :: Direction',
    module: 'Graphics',
  },
  { name: 'outward',
    type: 'up, down, left, right, inward, outward :: Direction',
    module: 'Graphics',
  },
  { name: 'above',
    type: 'above :: Element -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'below',
    type: 'below :: Element -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'beside',
    type: 'beside :: Element -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'layers',
    type: 'layers :: [Element] -> Element',
    module: 'Graphics',
  },
  { name: 'width',
    type: 'width :: Int -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'height',
    type: 'height :: Int -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'size',
    type: 'size :: Int -> Int -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'opacity',
    type: 'opacity :: Number -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'color',
    type: 'color :: Color -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'link',
    type: 'link :: String -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'widthOf',
    type: 'widthOf :: Element -> Int',
    module: 'Graphics',
  },
  { name: 'heightOf',
    type: 'heightOf :: Element -> Int',
    module: 'Graphics',
  },
  { name: 'sizeOf',
    type: 'sizeOf :: Element -> (Int,Int)',
    module: 'Graphics',
  },
  { name: 'spacer',
    type: 'spacer :: Int -> Int -> Element',
    module: 'Graphics',
  },
  { name: 'container',
    type: 'container :: Int -> Int -> Position -> Element -> Element',
    module: 'Graphics',
  },
  { name: 'topLeft',
    type: 'topLeft :: Position',
    module: 'Graphics',
  },
  { name: 'midLeft',
    type: 'midLeft :: Position',
    module: 'Graphics',
  },
  { name: 'bottomLeft',
    type: 'bottomLeft :: Position',
    module: 'Graphics',
  },
  { name: 'midTop',
    type: 'midTop :: Position',
    module: 'Graphics',
  },
  { name: 'middle',
    type: 'middle :: Position',
    module: 'Graphics',
  },
  { name: 'midBottom',
    type: 'midBottom :: Position',
    module: 'Graphics',
  },
  { name: 'topRight',
    type: 'topRight :: Position',
    module: 'Graphics',
  },
  { name: 'midRight',
    type: 'midRight :: Position',
    module: 'Graphics',
  },
  { name: 'bottomRight',
    type: 'bottomRight :: Position',
    module: 'Graphics',
  },
  { name: 'topLeftAt',
    type: 'topLeftAt :: Location -> Location -> Position',
    module: 'Graphics',
  },
  { name: 'bottomLeftAt',
    type: 'bottomLeftAt :: Location -> Location -> Position',
    module: 'Graphics',
  },
  { name: 'middleAt',
    type: 'middleAt :: Location -> Location -> Position',
    module: 'Graphics',
  },
  { name: 'topRightAt',
    type: 'topRightAt :: Location -> Location -> Position',
    module: 'Graphics',
  },
  { name: 'bottomRightAt',
    type: 'bottomRightAt :: Location -> Location -> Position',
    module: 'Graphics',
  },
  { name: 'absolute',
    type: 'absolute :: Int -> Location',
    module: 'Graphics',
  },
  { name: 'relative',
    type: 'relative :: Float -> Location',
    module: 'Graphics',
  },
  { name: 'toForm',
    type: 'toForm :: (Number,Number) -> Element -> Form',
    module: 'Graphics',
  },
  { name: 'sprite',
    type: 'sprite :: String -> Number -> Number -> (Number,Number) -> Form',
    module: 'Graphics',
  },
  { name: 'move',
    type: 'move :: Number -> Number -> Form -> Form',
    module: 'Graphics',
  },
  { name: 'rotate',
    type: 'rotate :: Number -> Number -> Form -> Form',
    module: 'Graphics',
  },
  { name: 'scale',
    type: 'scale :: Number -> Form -> Form',
    module: 'Graphics',
  },
  { name: 'isWithin',
    type: 'isWithin :: (Number,Number) -> Form -> Bool',
    module: 'Graphics',
  },
  { name: 'rect',
    type: 'rect :: Number -> Number -> (Number,Number) -> Shape',
    module: 'Graphics',
  },
  { name: 'oval',
    type: 'oval :: Number -> Number -> (Number,Number) -> Shape',
    module: 'Graphics',
  },
  { name: 'circle',
    type: 'circle :: Number -> (Number,Number) -> Shape',
    module: 'Graphics',
  },
  { name: 'ngon',
    type: 'ngon :: Number -> Number -> (Number,Number) -> Shape',
    module: 'Graphics',
  },
  { name: 'polygon',
    type: 'polygon :: [(Number,Number)] -> (Number,Number) -> Shape',
    module: 'Graphics',
  },
  { name: 'filled',
    type: 'filled :: Color -> Shape -> Form',
    module: 'Graphics',
  },
  { name: 'outlined',
    type: 'outlined :: Color -> Shape -> Form',
    module: 'Graphics',
  },
  { name: 'customOutline',
    type: 'customOutline :: [Number] -> Color -> Shape -> Form',
    module: 'Graphics',
  },
  { name: 'textured',
    type: 'textured :: String -> Shape -> Form',
    module: 'Graphics',
  },
  { name: 'line',
    type: 'line :: [(Number,Number)] -> Line',
    module: 'Graphics',
  },
  { name: 'segment',
    type: 'segment :: (Number,Number) -> (Number,Number) -> Line',
    module: 'Graphics',
  },
  { name: 'solid',
    type: 'solid :: Color -> Line -> Form',
    module: 'Graphics',
  },
  { name: 'dashed',
    type: 'dashed :: Color -> Line -> Form',
    module: 'Graphics',
  },
  { name: 'dotted',
    type: 'dotted :: Color -> Line -> Form',
    module: 'Graphics',
  },
  { name: 'customLine',
    type: 'customLine :: [Number] -> Color -> Line -> Form',
    module: 'Graphics',
  },
  { name: 'toText',
    type: 'toText :: String -> Text',
    module: 'Text',
  },
  { name: 'link',
    type: 'link :: String -> Text -> Text',
    module: 'Text',
  },
  { name: 'header',
    type: 'header :: Text -> Text',
    module: 'Text',
  },
  { name: 'height',
    type: 'height :: Number -> Text -> Text',
    module: 'Text',
  },
  { name: 'italic',
    type: 'italic :: Text -> Text',
    module: 'Text',
  },
  { name: 'bold',
    type: 'bold :: Text -> Text',
    module: 'Text',
  },
  { name: 'underline',
    type: 'underline :: Text -> Text',
    module: 'Text',
  },
  { name: 'color',
    type: 'color :: Color -> Text -> Text',
    module: 'Text',
  },
  { name: 'monospace',
    type: 'monospace :: Text -> Text',
    module: 'Text',
  },
  { name: 'typeface',
    type: 'typeface :: String -> Text -> Text',
    module: 'Text',
  },
  { name: 'overline',
    type: 'overline :: Text -> Text',
    module: 'Text',
  },
  { name: 'strikeThrough',
    type: 'strikeThrough :: Text -> Text',
    module: 'Text',
  },
  { name: 'read',
    type: 'read :: String -> Maybe Date',
    module: 'Date',
  },
  { name: 'toTime',
    type: 'toTime :: Date -> Time',
    module: 'Date',
  },
  { name: 'year',
    type: 'year :: Date -> Int',
    module: 'Date',
  },
  { name: 'month',
    type: 'month :: Date -> Month',
    module: 'Date',
  },
  { name: 'day',
    type: 'day :: Date -> Int',
    module: 'Date',
  },
  { name: 'dayOfWeek',
    type: 'dayOfWeek :: Date -> Day',
    module: 'Date',
  },
  { name: 'hour',
    type: 'hour :: Date -> Int',
    module: 'Date',
  },
  { name: 'minute',
    type: 'minute :: Date -> Int',
    module: 'Date',
  },
  { name: 'second',
    type: 'second :: Date -> Int',
    module: 'Date',
  },
  { name: 'Sun',
    type: 'data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat',
    module: 'Date',
  },
  { name: 'Mon',
    type: 'data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat',
    module: 'Date',
  },
  { name: 'Tue',
    type: 'data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat',
    module: 'Date',
  },
  { name: 'Wed',
    type: 'data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat',
    module: 'Date',
  },
  { name: 'Thu',
    type: 'data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat',
    module: 'Date',
  },
  { name: 'Fri',
    type: 'data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat',
    module: 'Date',
  },
  { name: 'Sat',
    type: 'data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat',
    module: 'Date',
  },
  { name: 'Jan',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Feb',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Mar',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Apr',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'May',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Jun',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Jul',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Aug',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Sep',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Oct',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Nov',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'Dec',
    type: 'data Month = Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec',
    module: 'Date',
  },
  { name: 'pure',
    type: 'pure :: (i -> o) -> Automaton i o',
    module: 'Automaton',
  },
  { name: 'init',
    type: 'init :: o -> (i -> o -> o) -> Automaton i o',
    module: 'Automaton',
  },
  { name: 'init\'',
    type: 'init\' :: s -> (i -> s -> (o,s)) -> Automaton i o',
    module: 'Automaton',
  },
  { name: '>>>',
    type: '(>>>) :: Automaton a b -> Automaton b c -> Automaton a c',
    module: 'Automaton',
  },
  { name: '<<<',
    type: '(<<<) :: Automaton b c -> Automaton a b -> Automaton a c',
    module: 'Automaton',
  },
  { name: 'combine',
    type: 'combine :: [Automaton a b] -> Automaton a [b]',
    module: 'Automaton',
  },
  { name: 'run',
    type: 'run :: Automaton a b -> Signal a -> Signal b',
    module: 'Automaton',
  },
  { name: 'step',
    type: 'step :: Automaton a b -> a -> (b, Automaton a b)',
    module: 'Automaton',
  },
  { name: 'count',
    type: 'count :: Automaton a Int',
    module: 'Automaton',
  },
  { name: 'draggable',
    type: 'draggable :: Form -> Automaton (Bool,(Int,Int)) Form',
    module: 'Automaton',
  },
  { name: '^>>',
    type: '(^>>) :: (a -> b) -> Automaton b c -> Automaton a c',
    module: 'Automaton',
  },
  { name: '>>^',
    type: '(>>^) :: Automaton a b -> (b -> c) -> Automaton a c',
    module: 'Automaton',
  },
  { name: '<<^',
    type: '(<<^) :: Automaton b c -> (a -> b) -> Automaton a c',
    module: 'Automaton',
  },
  { name: '^<<',
    type: '(^<<) :: (b -> c) -> Automaton a b -> Automaton a c',
    module: 'Automaton',
  },
  { name: 'Response',
    type: 'data Response a = Waiting | Success a | Failure Int String',
    module: 'HTTP',
  },
  { name: 'Waiting',
    type: 'data Response a = Waiting | Success a | Failure Int String',
    module: 'HTTP',
  },
  { name: 'Success',
    type: 'data Response a = Waiting | Success a | Failure Int String',
    module: 'HTTP',
  },
  { name: 'Failure',
    type: 'data Response a = Waiting | Success a | Failure Int String',
    module: 'HTTP',
  },
  { name: 'get',
    type: 'get :: String -> Request String',
    module: 'HTTP',
  },
  { name: 'post',
    type: 'post :: String -> String -> Request String',
    module: 'HTTP',
  },
  { name: 'request',
    type: 'request :: String -> String -> String -> [(String,String)] -> Request String',
    module: 'HTTP',
  },
  { name: 'send',
    type: 'send :: Signal (Request a) -> Signal (Response String)',
    module: 'HTTP',
  },
  { name: 'sendGet',
    type: 'sendGet :: Signal String -> Signal (Response String)',
    module: 'HTTP',
  },
  { name: 'textField',
    type: 'textField :: String -> (Element, Signal String)',
    module: 'Input',
  },
  { name: 'password',
    type: 'password :: String -> (Element, Signal String)',
    module: 'Input',
  },
  { name: 'textArea',
    type: 'textArea :: Int -> Int -> (Element, Signal String)',
    module: 'Input',
  },
  { name: 'checkbox',
    type: 'checkbox :: Bool -> (Element, Signal Bool)',
    module: 'Input',
  },
  { name: 'stringDropDown',
    type: 'stringDropDown :: [String] -> (Element, Signal String)',
    module: 'Input',
  },
  { name: 'dropDown',
    type: 'dropDown :: [(String,a)] -> (Element, Signal a)',
    module: 'Input',
  },
  { name: 'button',
    type: 'button :: String -> (Element, Signal Bool)',
    module: 'Input',
  },
  { name: 'keysDown',
    type: 'keysDown :: Signal [Int]',
    module: 'Raw',
  },
  { name: 'charPressed',
    type: 'charPressed :: Signal (Maybe Int)',
    module: 'Raw',
  },
  { name: 'position',
    type: 'position :: Signal (Int,Int)',
    module: 'Mouse',
  },
  /* Too easily interferes with x and y variable names - need more context from Codemirror to use
  { name: 'x',
    type: 'x :: Signal Int',
    module: 'Mouse',
  },
  { name: 'y',
    type: 'y :: Signal Int',
    module: 'Mouse',
  }, */
  { name: 'isDown',
    type: 'isDown :: Signal Bool',
    module: 'Mouse',
  },
  { name: 'isClicked',
    type: 'isClicked :: Signal Bool',
    module: 'Mouse',
  },
  { name: 'clicks',
    type: 'clicks :: Signal ()',
    module: 'Mouse',
  },
  { name: 'isClickedOn',
    type: 'isClickedOn :: Element -> (Element, Signal Bool)',
    module: 'Mouse',
  },
  { name: 'inRange',
    type: 'inRange :: Int -> Int -> Signal Int',
    module: 'Random',
  },
  { name: 'randomize',
    type: 'randomize :: Int -> Int -> Signal a -> Signal Int',
    module: 'Random',
  },
  { name: '<~',
    type: '(<~) :: (a -> b) -> Signal a -> Signal b',
    module: 'Signal',
  },
  { name: '~',
    type: '(~) :: Signal (a -> b) -> Signal a -> Signal b',
    module: 'Signal',
  },
  { name: 'constant',
    type: 'constant :: a -> Signal a',
    module: 'Signal',
  },
  { name: 'lift',
    type: 'lift :: (a -> b) -> Signal a -> Signal b',
    module: 'Signal',
  },
  { name: 'lift2',
    type: 'lift2 :: (a -> b -> c) -> Signal a -> Signal b -> Signal c',
    module: 'Signal',
  },
  { name: 'lift3',
    type: 'lift3 :: (a -> b -> c -> d) -> Signal a -> Signal b -> Signal c -> Signal d',
    module: 'Signal',
  },
  { name: 'merge',
    type: 'merge :: Signal a -> Signal a -> Signal a',
    module: 'Signal',
  },
  { name: 'merges',
    type: 'merges :: [Signal a] -> Signal a',
    module: 'Signal',
  },
  { name: 'mergeEither',
    type: 'merges :: Signal a -> Signal b -> Signal (Either a b)',
    module: 'Signal',
  },
  { name: 'foldp',
    type: 'foldp :: (a -> b -> b) -> b -> Signal a -> Signal b',
    module: 'Signal',
  },
  { name: 'count',
    type: 'count :: Signal a -> Signal Int',
    module: 'Signal',
  },
  { name: 'countIf',
    type: 'countIf :: (a -> Bool) -> Signal a -> Signal Int',
    module: 'Signal',
  },
  { name: 'average',
    type: 'average :: Int -> Signal Number -> Signal Float',
    module: 'Signal',
  },
  { name: 'foldp1',
    type: 'foldp1 :: (a -> a -> a) -> Signal a -> Signal a',
    module: 'Signal',
  },
  { name: 'foldp\'',
    type: 'foldp\' :: (a -> b -> b) -> (a -> b) -> Signal a -> Signal b',
    module: 'Signal',
  },
  { name: 'keepIf',
    type: 'keepIf :: (a -> Bool) -> a -> Signal a -> Signal a',
    module: 'Signal',
  },
  { name: 'dropIf',
    type: 'dropIf :: (a -> Bool) -> a -> Signal a -> Signal a',
    module: 'Signal',
  },
  { name: 'keepWhen',
    type: 'keepWhen :: Signal Bool -> a -> Signal a -> Signal a',
    module: 'Signal',
  },
  { name: 'dropWhen',
    type: 'dropWhen :: Signal Bool -> a -> Signal a -> Signal a',
    module: 'Signal',
  },
  { name: 'dropRepeats',
    type: 'dropRepeats :: Signal a -> Signal a',
    module: 'Signal',
  },
  { name: 'sampleOn',
    type: 'sampleOn :: Signal a -> Signal b -> Signal b',
    module: 'Signal',
  },
  { name: 'lift4',
    type: 'lift4 :: (a -> b -> c -> d -> e)\n      -> Signal a -> Signal b -> Signal c -> Signal d -> Signal e',
    module: 'Signal',
  },
  { name: 'lift5',
    type: 'lift5 :: (a -> b -> c -> d -> e -> f)\n      -> Signal a -> Signal b -> Signal c -> Signal d -> Signal e -> Signal f',
    module: 'Signal',
  },
  { name: 'lift6',
    type: 'lift6 :: (a -> b -> c -> d -> e -> f -> g)\n      -> Signal a -> Signal b -> Signal c -> Signal d -> Signal e -> Signal f -> Signal g',
    module: 'Signal',
  },
  { name: 'lift7',
    type: 'lift7 :: (a -> b -> c -> d -> e -> f -> g -> h)\n      -> Signal a -> Signal b -> Signal c -> Signal d -> Signal e -> Signal f -> Signal g -> Signal h',
    module: 'Signal',
  },
  { name: 'lift8',
    type: 'lift8 :: (a -> b -> c -> d -> e -> f -> g -> h -> i)\n      -> Signal a -> Signal b -> Signal c -> Signal d -> Signal e -> Signal f -> Signal g -> Signal h -> Signal i',
    module: 'Signal',
  },
  { name: 'hour',
    type: 'hour, minute, second, ms :: Time',
    module: 'Time',
  },
  { name: 'minute',
    type: 'hour, minute, second, ms :: Time',
    module: 'Time',
  },
  { name: 'second',
    type: 'hour, minute, second, ms :: Time',
    module: 'Time',
  },
  { name: 'ms',
    type: 'hour, minute, second, ms :: Time',
    module: 'Time',
  },
  { name: 'fps',
    type: 'fps :: Number -> Signal Time',
    module: 'Time',
  },
  { name: 'fpsWhen',
    type: 'fpsWhen :: Number -> Signal Bool -> Signal Time',
    module: 'Time',
  },
  { name: 'every',
    type: 'every :: Time -> Signal Time',
    module: 'Time',
  },
  { name: 'delay',
    type: 'delay :: Time -> Signal a -> Signal a',
    module: 'Time',
  },
  { name: 'since',
    type: 'since :: Time -> Signal a -> Signal Bool',
    module: 'Time',
  },
  { name: 'timestamp',
    type: 'timestamp :: Signal a -> Signal (Time,a)',
    module: 'Time',
  },
  { name: 'timeOf',
    type: 'timeOf :: Signal a -> Signal Time',
    module: 'Time',
  },
  { name: 'inHours',
    type: 'inHours, inMinutes, inSeconds, inMss :: Time -> Float',
    module: 'Time',
  },
  { name: 'inMinutes',
    type: 'inHours, inMinutes, inSeconds, inMss :: Time -> Float',
    module: 'Time',
  },
  { name: 'inSeconds',
    type: 'inHours, inMinutes, inSeconds, inMss :: Time -> Float',
    module: 'Time',
  },
  { name: 'inMss',
    type: 'inHours, inMinutes, inSeconds, inMss :: Time -> Float',
    module: 'Time',
  },
  { name: 'toDate',
    type: 'toDate :: Time -> Date',
    module: 'Time',
  },
  { name: 'read',
    type: 'read :: String -> Maybe Time',
    module: 'Time',
  },
  { name: 'dimensions',
    type: 'dimensions :: Signal (Int,Int)',
    module: 'Window',
  },
  { name: 'width',
    type: 'width :: Signal Int',
    module: 'Window',
  },
  { name: 'height',
    type: 'height :: Signal Int',
    module: 'Window',
  },
  {
    name: 'Either',
    type: 'data Either a b = Left a | Right b',
    module: 'Either',
  },
  {
    name: 'Left',
    type: 'data Either a b = Left a | Right b',
    module: 'Either',
  },
  {
    name: 'Right',
    type: 'data Either a b = Left a | Right b',
    module: 'Either',
  },
  {
    name: 'either',
    type: 'either :: (a -> c) -> (b -> c) -> Either a b -> c',
    module: 'Either',
  },
  {
    name: 'isLeft',
    type: 'isLeft :: Either a b -> Bool',
    module: 'Either',
  },
  {
    name: 'isRight',
    type: 'isRight :: Either a b -> Bool',
    module: 'Either',
  },
  {
    name: 'lefts',
    type: 'lefts :: [Either a b] -> [a]',
    module: 'Either',
  },
  {
    name: 'rights',
    type: 'rights :: [Either a b] -> [b]',
    module: 'Either',
  },
  {
    name: 'partition',
    type: 'partition :: [Either a b] -> ([a],[b])',
    module: 'Either',
  },
  {
    name: 'arrows',
    type: 'arrows :: Signal { x :: Int, y :: Int }',
    module: 'Keyboard',
  },
  {
    name: 'wasd',
    type: 'wasd :: Signal { x :: Int, y :: Int }',
    module: 'Keyboard',
  },
  {
    name: 'shift',
    type: 'shift :: Signal Bool',
    module: 'Keyboard',
  },
  {
    name: 'ctrl',
    type: 'ctrl :: Signal Bool',
    module: 'Keyboard',
  },
  {
    name: 'space',
    type: 'space :: Signal Bool',
    module: 'Keyboard',
  },
  {
    name: 'touches',
    type: 'touches :: Signal [{ x  :: Int, y  :: Int, id :: Int, x0 :: Int, y0 :: Int, t0 :: Time }]',
    module: 'Touch',
  },
  {
    name: 'taps',
    type: 'taps :: Signal { x :: Int, y :: Int }',
    module: 'Touch',
  },
  {
    name: 'castJSBoolToBool',
    type: 'castJSBoolToBool :: JSBool -> Bool',
    module: 'Javascript',
  },
  {
    name: 'castBoolToJSBool',
    type: 'castBoolToJSBool :: Bool -> JSBool',
    module: 'Javascript',
  },
  {
    name: 'castJSNumberToInt',
    type: 'castJSNumberToInt :: JSNumber -> Int',
    module: 'Javascript',
  },
  {
    name: 'castIntToJSNumber',
    type: 'castIntToJSNumber :: Int -> JSNumber',
    module: 'Javascript',
  },
  {
    name: 'castJSNumberToFloat',
    type: 'castJSNumberToFloat :: JSNumber -> Float',
    module: 'Javascript',
  },
  {
    name: 'castFloatToJSNumber',
    type: 'castFloatToJSNumber :: Float -> JSNumber',
    module: 'Javascript',
  },
  {
    name: 'castJSStringToString',
    type: 'castJSStringToString :: JSString -> String',
    module: 'Javascript',
  },
  {
    name: 'castStringToJSString',
    type: 'castStringToJSString :: String -> JSString',
    module: 'Javascript',
  },
  {
    name: 'castListToJSArray',
    type: 'castListToJSArray :: [a] -> JSArray a',
    module: 'Javascript',
  },
  {
    name: 'castJSArrayToList',
    type: 'castJSArrayToList :: JSArray a -> [a]',
    module: 'Javascript',
  },
  {
    name: 'castTupleToJSTuple2',
    type: 'castTupleToJSTuple2 :: (a,b) -> JSTuple2 a b',
    module: 'Javascript',
  },
  {
    name: 'castJSTupleToTuple2',
    type: 'castJSTupleToTuple2 :: JSTuple2 a b -> (a,b)',
    module: 'Javascript',
  },
  {
    name: 'castTupleToJSTuple3',
    type: 'castTupleToJSTuple3 :: (a,b,c) -> JSTuple3 a b c',
    module: 'Javascript',
  },
  {
    name: 'castJSTupleToTuple3',
    type: 'castJSTupleToTuple3 :: JSTuple3 a b c > (a,b,c)',
    module: 'Javascript',
  },
  {
    name: 'castTupleToJSTuple4',
    type: 'castTupleToJSTuple4 :: (a,b,c,d) -> JSTuple4 a b c d',
    module: 'Javascript',
  },
  {
    name: 'castJSTupleToTuple4',
    type: 'castJSTupleToTuple4 :: JSTuple4 a b c d -> (a,b,c,d)',
    module: 'Javascript',
  },
  {
    name: 'castTupleToJSTuple5',
    type: 'castTupleToJSTuple5 :: (a,b,c,d,e) -> JSTuple5 a b c d e',
    module: 'Javascript',
  },
  {
    name: 'castJSTupleToTuple5',
    type: 'castJSTupleToTuple5 :: JSTuple5 a b c d e -> (a,b,c,d,e)',
    module: 'Javascript',
  },
  {
    name: 'castJSElementToElement',
    type: 'castJSElementToElement :: Int -> Int -> JSElement -> Element',
    module: 'Experimental',
  },
  {
    name: 'castElementToJSElement',
    type: 'castElementToJSElement :: Element -> JSElement',
    module: 'Experimental',
  },
  {
    name: 'empty',
    type: 'empty :: JsonObject a',
    module: 'JSON',
  },
  {
    name: 'singleton',
    type: 'singleton :: String -> a -> JsonObject a',
    module: 'JSON',
  },
  {
    name: 'insert',
    type: 'insert :: String -> a -> JsonObject a -> JsonObject a',
    module: 'JSON',
  },
  {
    name: 'remove',
    type: 'remove :: String -> JsonObject a -> JsonObject a',
    module: 'JSON',
  },
  {
    name: 'lookup',
    type: 'lookup :: String -> JsonObject a -> Maybe a',
    module: 'JSON',
  },
  {
    name: 'findString',
    type: 'findString :: String -> JsonObject JsonValue -> String',
    module: 'JSON',
  },
  {
    name: 'findObject',
    type: 'findObject :: String -> JsonObject JsonValue -> JsonObject JsonValue',
    module: 'JSON',
  },
  {
    name: 'findArray',
    type: 'findArray :: String -> JsonObject JsonValue -> [JsonObject JsonValue]',
    module: 'JSON',
  },
  {
    name: 'findWithDefault',
    type: 'findWithDefault :: a -> String -> JsonObject a -> a',
    module: 'JSON',
  },
  {
    name: 'toList',
    type: 'toList :: JsonObject a -> [(String,a)]',
    module: 'JSON',
  },
  {
    name: 'fromList',
    type: 'fromList :: [(String,a)] -> JsonObject a',
    module: 'JSON',
  },
  {
    name: 'JsonValue',
    type: 'data JsonValue = JsonString String | JsonNumber Float | JsonBool Bool | JsonNull | JsonArray [JsonValue] | JsonObject (JsonObject JsonValue)',
    module: 'JSON',
  },
  {
    name: 'JsonString',
    type: 'data JsonValue = JsonString String | JsonNumber Float | JsonBool Bool | JsonNull | JsonArray [JsonValue] | JsonObject (JsonObject JsonValue)',
    module: 'JSON',
  },
  {
    name: 'JsonNumber',
    type: 'data JsonValue = JsonString String | JsonNumber Float | JsonBool Bool | JsonNull | JsonArray [JsonValue] | JsonObject (JsonObject JsonValue)',
    module: 'JSON',
  },
  {
    name: 'JsonBool',
    type: 'data JsonValue = JsonString String | JsonNumber Float | JsonBool Bool | JsonNull | JsonArray [JsonValue] | JsonObject (JsonObject JsonValue)',
    module: 'JSON',
  },
  {
    name: 'JsonNull',
    type: 'data JsonValue = JsonString String | JsonNumber Float | JsonBool Bool | JsonNull | JsonArray [JsonValue] | JsonObject (JsonObject JsonValue)',
    module: 'JSON',
  },
  {
    name: 'JsonArray',
    type: 'data JsonValue = JsonString String | JsonNumber Float | JsonBool Bool | JsonNull | JsonArray [JsonValue] | JsonObject (JsonObject JsonValue)',
    module: 'JSON',
  },
  {
    name: 'JsonObject',
    type: 'data JsonValue = JsonString String | JsonNumber Float | JsonBool Bool | JsonNull | JsonArray [JsonValue] | JsonObject (JsonObject JsonValue)',
    module: 'JSON',
  },
  {
    name: 'toString',
    type: 'toString :: JsonObject JsonValue -> String',
    module: 'JSON',
  },
  {
    name: 'fromString',
    type: 'fromString :: String -> JsonObject JsonValue',
    module: 'JSON',
  },
  {
    name: 'toJSString',
    type: 'toJSString :: JsonObject JsonValue -> JSString',
    module: 'JSON',
  },
  {
    name: 'fromJSString',
    type: 'fromJSString :: JSString -> JsonObject JsonValue',
    module: 'JSON',
  },
  {
    name: 'toPrettyString',
    type: 'toPrettyString :: String -> JsonObject JsonValue -> String',
    module: 'JSON',
  },
  {
    name: 'toPrettyJSString',
    type: 'toPrettyJSString :: String -> JsonObject JsonValue -> JSString',
    module: 'JSON',
  },
]
